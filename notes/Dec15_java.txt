Plan for the day
--------------------
overriding equals method
Collections
String
Exception



We discussed about 
	==
	equals()

What is the difference between the above two?
	== compares references (when the operands are ref types)
	equals method compares the values

a and b are objects	(ref types)
a==b	checks if their references are same
a.equals	checks if their values are same

Integer
Float
Double

Employee
	id
	name
	salary

Employee e1=new Employee(1,"Raja",123456); 
Employee e2=new Employee(1,"Raja",123456);

e1==e2	
	what will be result?
		false

e1.equals(e2)
	clarify whether Employee class has overridden the equals method or not?



Hint:
	you can check if 2 dates are equal or not using equals method
		dt1.equals(dt2)

TasK:
	Java Mock 11 Req 1
		point #6	override the equals method

	Override the equals method and paste the method code alone in chat



What is the difference between
	nextLine()	use only newline delimiter
	next()	use any delimiter		space / tab / newline


while user enters input


india is our country

	the entire line is captured as a String (when you use nextLine())
	india is captured by next() method



Whenever you use nextLine method after a
	next() or
	nextInt() or
	nextFloat() or
	any other methods, you will face a problem





IIT Madras,www.iitm.ac.in,7845612390,iit,16,Madras,15-12-1959
	we can split this String into multiple Strings 
		



Integer.parseInt("12");		returns an int
Integer.valueOf("12");		returns an Integer



equalsIgnoreCase()	checks if both are equal, ignoring the case


TasK:
	accept a string input and parse it into an object
	check if those objects are equal or not

-----------------------------------------------------------
Collections
---------------
	how collections are different from arrays?
	1) Arrays are fixed length
	2) Size of arrays must be known when we create arrays
	
Collections in java, belongs to 
	java.util package

What are the collection classes we learn?

List	(interface)
	ArrayList		
	LinkedList		
Set
	HashSet
	TreeSet
	LinkedHashSet
Map
	HashMap
	TreeMap
	LinkedHashMap



Difference between List and Set?
1) List allows duplicates. Set does not allow duplicates		(Set is a collection of distinct objects)
2) List is ordered. Order is not asc or desc order. It is the order in which the elements are added.
	All lists are ordered.
	What about Set??????????		people say Set is unordered
		Every type of set has a particular order. (Need not be the order in which they are added)
		HashSet	- The order is based on hasCode() method
		TreeSet	- The order is sorted manner	based on Comparator / Comparable
		LinkedHashSet	-	Orderd	(similar to List)
3) List can be sorted (even after adding elements)
	Collections.sort(list);	
	Set does not allow us to re-arrange elements after added. 
	TreeSet maintains sorted order. But while adding elements, the elements are placed in correct locations while adding.
		later, rearranging is not possible
		you may convert the set into a list and sort it again
	
4) Traversing a list can be done from last to first is possible. 	Set do not have this.

list.add(10);
list.add(20);
list.add(10);
list.add(5);
list.add(30);

set.add(10);
set.add(20);
set.add(10);		//duplicate.		Rejected
set.add(5);
set.add(30);


What is the difference betwen Array and Collection?
	arrays can be primitives also
	int []arr=new int[10];	//possible
but, collections are always objects

	ArrayList<Integer> list=new ArrayList<>();	//possible
		remember ArrayList<int> is NOT possible






import java.util.ArrayList;

public class Main1 {

	public static void main(String[] args) {
		ArrayList<Integer> marks=new ArrayList<>();
		marks.add(90);
		marks.add(50);
		marks.add(40);
		marks.add(50);
		marks.add(80);
		marks.add(90);
		marks.add(100);
		marks.add(45);
		marks.add(76);
		
		System.out.println(marks);
	}

}

Output:
[90, 50, 40, 50, 80, 90, 100, 45, 76]


observation:
1) duplicates were allowed
2) order is same as added


import java.util.ArrayList;
import java.util.Iterator;

public class Main1 {

	public static void main(String[] args) {
		ArrayList<Integer> marks=new ArrayList<>();
		marks.add(90);
		marks.add(50);
		marks.add(40);
		marks.add(50);
		marks.add(80);
		marks.add(90);
		marks.add(100);
		marks.add(45);
		marks.add(76);
		
//		System.out.println(marks);
		
//		for(int i=0;i<marks.size();i++)
//		{
//			//Vector and ArrayList only have index
//			System.out.println(marks.get(i));
//		}
		
//		for(Integer x:marks)
//			System.out.println(x);
		
//		Iterator<Integer> it = marks.iterator();
//		while(it.hasNext())
//		{
//			Integer x = it.next();
//			System.out.println(x);
//		}
	}

}

Task:
------
	Create an arraylist of String type and 
	add few country names

	display all elements of array list using different methods



Problem:
	when i loop a collection
	and inside the loop, 
	if i remove an element of the collection,
	i face error
		ConcurrentModificationException


Iterator
	is used to traverse each element of a collection

	hasNext()		returns true when there is any more element to traverse
	next()		consumes an element and returns the same
	remove()		removes the current element



We used array list and now we can use LinkedList
	in LinkedList, we don't have index
		list.get(0)		//not possible
we can traverse a linked list using iterator or for each loop		(but not using for loop. because there is no index)

we can traverse a linked list in reverse order using
	ListIterator
		instead of iterator
		can work only for List (does not work for Set)
		
methods of ListIterator
	hasNext()
	next()
	remove()
	
	hasPrevious()
	previous()




public List<String> reverse(ArrayList<String> source)
{
	//reverse the source list and return
	ArrayList<String> result=new ArrayList<>();
	ListIterator<String> it=source.listIterator();
	while(it.hasNext())
	{
		it.next();
	}
	//reverse
	while(it.hasPrevious())
	{
		String s=it.previous();
		result.add(s);
	}
	return result;
}



--------------------------
TasK:
-------
	Java Mock 11 Req 2:
		createCollege method accepts csv and returns object of College
		split by ,
		addCollegeToUniversity
		removeCollege
		displayColleges



public University()
{
	this.collegeList=new ArrayList<>();	
}

public University(String name, List<College> collegeList)
{
	this.name=name;
	this.collegeList=collegeList;
}