ngIf
ngSwitch
ngFor

lets create a new project
1) choose a folder where you want to create an angular project
	D:\Jag\Capgemini\Dec1stBatch\Angular

2) cmd/ node.js command prompt

3) how to create angular project
	ng new second-project --routing --style=css

4) cd second-project

5) code .
	to open vs code in current location

6) ng serve -o
	run the project and open in browser

ts file should be compiled to become a js file
when will this happen?
	we see only src folder, but there is no dist folder,
	because we have not built the project

		ng build

	this command will build the project
------------------------------------------
*ngIf
	we can choose to show a container or element based on a condition

in .ts file

status:boolean=false;

<p>practise works!</p>

<input type="checkbox" name="status" id="status" [(ngModel)]="status">Show/Hide
<br>

<br>
<div *ngIf="status">
    This is the content of the div. 
    <p>This is a paragraph</p>
</div>
<hr>
<p *ngIf="status">This para is outside the div</p>





---------------------------------
*ngSwitch
in ts file
	dept:string="";

<p>switch-demo works!</p>
<div [ngSwitch]="dept">
    <input type="text" name="dept" id="dept" [(ngModel)]="dept">
    <br>
    <!-- {{ dept }}
    {{ dept=='CSE'}} -->
    <br><br>
    <div *ngSwitchCase="'CSE'">
        CSE dept is Computer Science Department
    </div>
    <div *ngSwitchCase="'ECE'">
        ECE dept is Electronics and Communication Engineering
    </div>
    <div *ngSwitchCase="'EEE'">
        EEE is Electical and Electronics Engineering
    </div>
    <div *ngSwitchCase="'IT'">
        IT department is Information Technology
    </div>
</div>


--------------------------------------------
Task (for if)
----------------
Enter the marks:...........................
div
	Excellent
div
	Good
div
	Fair
div
	Fail

in each div, give a condition
	<div *ngIf="marks>=80">

> can be &gt;


Task for switch
--------------------
Create a dropdown list


------------------------
*ngFor
	we use for each in java, iterating arrays or collections
	same way, lets create an array and iterate the array using ng for directive



1) in .ts class, create an array
	countries=['India','Australia','Srilanka','China'];

2) in .html
	<ul>
	    <li *ngFor="let c of countries">{{c}}</li>
	</ul>

Try this now, and tell me
--------------------------
Once you are able to do that, try this

Task:
-------
1) create a class "Employee"
	ng g class employee
2) in component.ts
	create an array of employees
3) add 3 to 4 employee objects to the array

4) display the employee details in html 
	as a table


Steps:
1) create a class
	ng g class employee

2) in Employee class, create a constructor with arguments
	
3) in .ts create an array of employees
	employees:Employee[]=[];
4) in constructor of component
	add few employee objects	(use push method to add elements to an array)
6) in html code
	<table class="table table-bordered table-striped table-hover">
    <thead>
        <tr>
            <th>Id</th><th>First Name</th><th>Last Name</th><th>Salary</th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor="let e of employees">
            <td>{{ e.id }}</td>
            <td>{{ e.firstName }}</td>
            <td>{{ e.lastName }}</td>
            <td>{{ e.salary }}</td>
        </tr>
    </tbody>
</table>


---------------------------------------------------------
In our project,	
	can you find any nested components?
	parent component,
	child component


in our example:
	AppComponent 
		is the parent component. Because, we have plugged 3 child components in app component.
		

Scenario:
------------
You are asked to create a LoginComponent and plug it in AppComponent

this login component's background color should be changeable by the parent component


in app:
	<app-login color="blue"></app-login>

the parent component, is trying to give an input to the child component

How this input can be captured by the child component?

in .ts class,

declare a variable

@Input()	color:string="";



------------
Task:

You have plugged lot of components as child components to the parent called AppComponent
Now, each component can have title, and that title can be chosen by the parent component.

Steps:
1) create a variable called "title" in the child components, decorated by @Input() decorator
2) in parent, send input to the child component as attribute



------------------------------------
Now, Lets learn @Output() decorator.
What do you think output will be?
	because, you know what is input.
very good. Child component sends output to the parent component.

But actually, child emits an event. That event can be handled by the parent component.

Scenario:
You are creating a LoginComponent (this will be the child component for AppComponent)

Now, the main reason, why we created this login component, is that it should be reusable.
So, login is success or failure, should be decided by the parent component that uses child component.

imagine, somebody else is creating this login component.
You are using it in the AppComponent.

But the login button is inside the login component. So click event of login button can be handled by LoginComponent only.

So, when we click the login button, inside login component, we should raise an event, that can be handled by the app component.


1) in Login component, button client event handler,
	emit an event

@Output() loginEvent:EventEmitter<User>=new EventEmitter<User>();

fnLogin()
  {
    // alert('Login button is clicked');
    // alert(this.username);
    let user:User=new User();
    user.username=this.username;
    user.password=this.password;
    this.loginEvent.emit(user);
    
  }

2) in AppComponent, handle the event
	<app-login [color]="color" (loginEvent)="fnLoginEvent($event)"></app-login>


fnLoginEvent(args:User)
  {
    // alert(JSON.stringify(args));
    if(args.username==args.password)
      alert('Login failed');
    else
      alert('Login success');
  }


Try this now in your LoginComponent
-----------------------------------------------------




