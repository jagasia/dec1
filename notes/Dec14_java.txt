Arrays
--------
single dimensional arrays
multi dimensional arrays

Declaration:
------------------
int []marks;	//in java, this is fine
int marks[];	//in java, this is also fine

int marks[10];		//c++

int []marks;		//declaration
marks=new int[10];		//create the array


int []marks=new int[10];	

int marks[]={90,100,80,20,50,40,30};		//we can create an array like this also
	the above array is created of size 7

marks[0]=100;		//it was 90 and now it is changed to 100

{}	are used to create a block
{}	use to represent an array



import java.util.Arrays;

public class Main {

	public static void main(String[] args) {
		int marks[]={90,100,80,20,50,40,30};
		System.out.println(Arrays.toString(marks));
	}

}




Array has a "length" property

		for(int i=0;i<marks.length;i++)
		{
			System.out.println(marks[i]);
		}


for - each loop
	useful for iterating all elements of an array or collection

-------------------------------------------
Multi dimensional array
---------------------------------
int [][]marks=new int[10][10];

marks[0][0]=100;
marks[0][1]
marks[0][2]
marks[0][3]
....
marks[0][9]

marks[1][0]
marks[1][1]
..
marks[1][9]



Java multi dimensional arrays are Jagged arrays.


int [][][]marks=new int[10][10][10];




public class TwoDimensionalArray {

	public static void main(String[] args) {
		int marks[][]= {
				{1,2,3,4,5,6,7},
				{11,22,33,44},
				{111,222,333,444,555,666,777,888,999}
				};
		
		for(int i=0;i<marks.length;i++)
		{
			for(int j=0;j<marks[i].length;j++)
			{
				System.out.printf("Element at i=%d\tj=%d is %d\n",i,j,marks[i][j]);
			}
		}
	}

}



int x;		variable x is created. creation of a primitive variable is complete.
x=20;

Date today=new Date();

Date dt;		//this is not complete. We have create a reference variable called dt.	
dt=new Date();	//an object of type Date is being created and its reference is kept in the variable dt.

Square and Tower
In a city, there are N mobile signal towers. Raj is creating an application to visualize the coverage area of the signal towers.
        For simplicity, the following are assumed: 
1) the shape of the city is square. 
2) the signal coverage is in the form of a square. 
3) the side length of the signal coverage is 3 meters.
        Given side length of the city, number of towers, and coordinates of towers, find whether whole city is under coverage.  If the whole city is not under signal coverage, find how much area is not under coverage. 

Assume that the two of the end of points of the city are  (0,0) and (n-1,n-1). 
Input Format: 
First input corresponds to n, length of the city. 
Second input corresponds to the number of towers, t. 
The next n lines of the input follow the following format: x and y coordinates of each tower, respectively. 

Consider that tower is always placed at valid position. 

Output Format: 
Print "Yes" if the whole city is under coverage. Else, print "No", along with the left out area. 

Sample Input 1: 
5
3
2 2
0 1
4 1 

Sample output 1:
No
8 

Sample Input 2: 
3 
1 
1 1 
Sample Output 2: 
Yes 


Explanation for sample 1: 
4	 	T3	 	 	 
3	 	 	 	 	 
2	 	 	T1	 	 
1	 	 	 	 	 
0	 	T2	 	 	 
 	0	1	2	3	4
Green colour indicates the coverage area. 
Red colour indicates the area which is not under coverage. 
Total red area = 8. 
 


------Steps--------
1) get input from the user:	cityLength
	create an array called city
		int city[][]=new int[cityLength][cityLength];
	
2) get input: noOfTowers
	int noOfTowers;

	create an array of towers
		int tower[][]=new int[noOfTowers][2];

3) loop for the number of towers and get 
	x & y input from the user


4) now that you got the x, y coordinates of towers,
	in city array, you set "1" in those areas

	you set 1 in not only the tower location but also in their adjacent locations

5) now check the city array, if any 0s are found. If not then coverage is "Yes". There 0s are found, then coverage is No and then display the number of 0s







Solution:
----------
import java.util.Scanner;

public class Tower {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int cityLength=sc.nextInt();
		int city[][]=new int[cityLength][cityLength];
		int noOfTowers=sc.nextInt();
		int towers[][]=new int[noOfTowers][2];
		for(int i=0;i<noOfTowers;i++)
		{
			int x=sc.nextInt();
			int y=sc.nextInt();
			towers[i][0]=x;
			towers[i][1]=y;
		}
		
		//if there is one tower at 2,2 then
//		city[2][2]=1;
		for(int i=0;i<noOfTowers;i++)
		{
			int x=towers[i][0];
			int y=towers[i][1];	
			
//			city[x][y]=1;		//signal is there at tower location
			for(int a=-1;a<=1;a++)
			{
				for(int b=-1;b<=1;b++)
				{
					if(x+a<0 || x+a>=cityLength ||y+a<0 || y+a>=cityLength)
						continue;
					city[x+a][y+b]=1;
				}
			}
		}

		int zeroCount=0;
		for(int i=0;i<cityLength;i++)
		{
			for(int j=0;j<cityLength;j++)
			{
//				System.out.print(city[i][j]+"\t");
				if(city[i][j]==0)
				{
					zeroCount++;
				}
			}
//			System.out.println();
		}
		if(zeroCount==0)
		{
			System.out.println("Yes");
		}
		else
		{
			System.out.println("No");
			System.out.println(zeroCount);
		}
	}

}
------------------------------------------
â€¢	Classes and Objects

Naming conventions for creating a class in java:
1) class name must be a noun
2) start with capital letter
	PascalCase		every word first letter in upper case


A class can contain
	variables
	constants
	methods	(functions)
	constructors	
	
A class contains
	non public data members

non public means
	private
	default		no access specifier mentioned
		int id;
	protected

Access specifiers:
	public		full access		anywhere
	protected		access to same package or derived/sub class
	default		same package
	private		only within the class



property:
	what is a property in Java?
	any non public variable that has
		public getter or setter or both


Constructor
---------------
	is a special method
	same name as class name
	no return type
	can take arguments also
	can be overloaded
	


Date
-------
belongs to java.util

1) How to convert a String into a Date
2) How to convert a Date into a String	(so that it will be in the required format)


1) How to convert a String into a Date
	SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
	i) parse()		converts String into Date
	ii) format()		converts Date into String



dd	2 digit date format		01
MM	22 digit month format		12		
MMM	short month string		Dec
MMMM	full month string		December
yy	2 digit year			22
yyyy	full year			2022
EEE				Wed
EEEE				Wednesday
HH
hh
mm
ss
am





import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class DateDemo1 {

	public static void main(String[] args) throws ParseException  {
		Scanner sc=new Scanner(System.in);
		String input=sc.next();
//		System.out.println(input);
		Date dt=new Date();
		
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MMM-yyyy");
		dt=sdf.parse(input);
		
		System.out.println(dt);
		
		//convert dt(Date) into string in a format		yyyy-MM-dd
		
		SimpleDateFormat sdf2=new SimpleDateFormat("yyyy-MM-dd");
		System.out.println(sdf2.format(dt));
		
		
	}

}



