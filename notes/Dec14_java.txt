Arrays
--------
single dimensional arrays
multi dimensional arrays

Declaration:
------------------
int []marks;	//in java, this is fine
int marks[];	//in java, this is also fine

int marks[10];		//c++

int []marks;		//declaration
marks=new int[10];		//create the array


int []marks=new int[10];	

int marks[]={90,100,80,20,50,40,30};		//we can create an array like this also
	the above array is created of size 7

marks[0]=100;		//it was 90 and now it is changed to 100

{}	are used to create a block
{}	use to represent an array



import java.util.Arrays;

public class Main {

	public static void main(String[] args) {
		int marks[]={90,100,80,20,50,40,30};
		System.out.println(Arrays.toString(marks));
	}

}




Array has a "length" property

		for(int i=0;i<marks.length;i++)
		{
			System.out.println(marks[i]);
		}


for - each loop
	useful for iterating all elements of an array or collection

-------------------------------------------
Multi dimensional array
---------------------------------
int [][]marks=new int[10][10];

marks[0][0]=100;
marks[0][1]
marks[0][2]
marks[0][3]
....
marks[0][9]

marks[1][0]
marks[1][1]
..
marks[1][9]



Java multi dimensional arrays are Jagged arrays.


int [][][]marks=new int[10][10][10];




public class TwoDimensionalArray {

	public static void main(String[] args) {
		int marks[][]= {
				{1,2,3,4,5,6,7},
				{11,22,33,44},
				{111,222,333,444,555,666,777,888,999}
				};
		
		for(int i=0;i<marks.length;i++)
		{
			for(int j=0;j<marks[i].length;j++)
			{
				System.out.printf("Element at i=%d\tj=%d is %d\n",i,j,marks[i][j]);
			}
		}
	}

}



int x;		variable x is created. creation of a primitive variable is complete.
x=20;

Date today=new Date();

Date dt;		//this is not complete. We have create a reference variable called dt.	
dt=new Date();	//an object of type Date is being created and its reference is kept in the variable dt.

Square and Tower
In a city, there are N mobile signal towers. Raj is creating an application to visualize the coverage area of the signal towers.
        For simplicity, the following are assumed: 
1) the shape of the city is square. 
2) the signal coverage is in the form of a square. 
3) the side length of the signal coverage is 3 meters.
        Given side length of the city, number of towers, and coordinates of towers, find whether whole city is under coverage.  If the whole city is not under signal coverage, find how much area is not under coverage. 

Assume that the two of the end of points of the city are  (0,0) and (n-1,n-1). 
Input Format: 
First input corresponds to n, length of the city. 
Second input corresponds to the number of towers, t. 
The next n lines of the input follow the following format: x and y coordinates of each tower, respectively. 

Consider that tower is always placed at valid position. 

Output Format: 
Print "Yes" if the whole city is under coverage. Else, print "No", along with the left out area. 

Sample Input 1: 
5
3
2 2
0 1
4 1 

Sample output 1:
No
8 

Sample Input 2: 
3 
1 
1 1 
Sample Output 2: 
Yes 


Explanation for sample 1: 
4	 	T3	 	 	 
3	 	 	 	 	 
2	 	 	T1	 	 
1	 	 	 	 	 
0	 	T2	 	 	 
 	0	1	2	3	4
Green colour indicates the coverage area. 
Red colour indicates the area which is not under coverage. 
Total red area = 8. 
 


------Steps--------
1) get input from the user:	cityLength
	create an array called city
		int city[][]=new int[cityLength][cityLength];
	
2) get input: noOfTowers
	int noOfTowers;

	create an array of towers
		int tower[][]=new int[noOfTowers][2];

3) loop for the number of towers and get 
	x & y input from the user


4) now that you got the x, y coordinates of towers,
	in city array, you set "1" in those areas

	you set 1 in not only the tower location but also in their adjacent locations

5) now check the city array, if any 0s are found. If not then coverage is "Yes". There 0s are found, then coverage is No and then display the number of 0s







Solution:
----------
import java.util.Scanner;

public class Tower {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int cityLength=sc.nextInt();
		int city[][]=new int[cityLength][cityLength];
		int noOfTowers=sc.nextInt();
		int towers[][]=new int[noOfTowers][2];
		for(int i=0;i<noOfTowers;i++)
		{
			int x=sc.nextInt();
			int y=sc.nextInt();
			towers[i][0]=x;
			towers[i][1]=y;
		}
		
		//if there is one tower at 2,2 then
//		city[2][2]=1;
		for(int i=0;i<noOfTowers;i++)
		{
			int x=towers[i][0];
			int y=towers[i][1];	
			
//			city[x][y]=1;		//signal is there at tower location
			for(int a=-1;a<=1;a++)
			{
				for(int b=-1;b<=1;b++)
				{
					if(x+a<0 || x+a>=cityLength ||y+a<0 || y+a>=cityLength)
						continue;
					city[x+a][y+b]=1;
				}
			}
		}

		int zeroCount=0;
		for(int i=0;i<cityLength;i++)
		{
			for(int j=0;j<cityLength;j++)
			{
//				System.out.print(city[i][j]+"\t");
				if(city[i][j]==0)
				{
					zeroCount++;
				}
			}
//			System.out.println();
		}
		if(zeroCount==0)
		{
			System.out.println("Yes");
		}
		else
		{
			System.out.println("No");
			System.out.println(zeroCount);
		}
	}

}
------------------------------------------
â€¢	Classes and Objects

Naming conventions for creating a class in java:
1) class name must be a noun
2) start with capital letter
	PascalCase		every word first letter in upper case


A class can contain
	variables
	constants
	methods	(functions)
	constructors	
	
A class contains
	non public data members

non public means
	private
	default		no access specifier mentioned
		int id;
	protected

Access specifiers:
	public		full access		anywhere
	protected		access to same package or derived/sub class
	default		same package
	private		only within the class



property:
	what is a property in Java?
	any non public variable that has
		public getter or setter or both


Constructor
---------------
	is a special method
	same name as class name
	no return type
	can take arguments also
	can be overloaded
	


Date
-------
belongs to java.util

1) How to convert a String into a Date
2) How to convert a Date into a String	(so that it will be in the required format)


1) How to convert a String into a Date
	SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
	i) parse()		converts String into Date
	ii) format()		converts Date into String



dd	2 digit date format		01
MM	22 digit month format		12		
MMM	short month string		Dec
MMMM	full month string		December
yy	2 digit year			22
yyyy	full year			2022
EEE				Wed
EEEE				Wednesday
HH
hh
mm
ss
am





import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class DateDemo1 {

	public static void main(String[] args) throws ParseException  {
		Scanner sc=new Scanner(System.in);
		String input=sc.next();
//		System.out.println(input);
		Date dt=new Date();
		
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MMM-yyyy");
		dt=sdf.parse(input);
		
		System.out.println(dt);
		
		//convert dt(Date) into string in a format		yyyy-MM-dd
		
		SimpleDateFormat sdf2=new SimpleDateFormat("yyyy-MM-dd");
		System.out.println(sdf2.format(dt));
		
		
	}

}

----------------------------------------------------------------
String
-------
	sequence of characters
	immutable
	double quotes	""
	

immutable means, cannot be altered

int []marks={1,2,3,4,5};

String str1="hello world";
String str2=str1;
String str3=str1;
String str4="hello world";
str4="hello Bengaluru";

variable
	same memory location	
	but values only get changed

StringBuilder		(fast, not sync)
StringBuffer		(slow, sync)
	both of these classes have same set of properties and methods
	only difference is,
		StringBuffer is synchronized
		synchronized means, only 1 thread is allowed to access at a time




Employee emp=new Employee();
String str1=new String();



== compares the values if the operands are value types
int i=20;
int j=20;

i==j
		their values are compared

Employee raja=new ...
Employee siva=new ....



raja==siva
	their references are compared. Because they are reference types

== vs equals()

== compares the references when the operands are ref types
equals method compares the values


String str="abcdefgh";
str.reverse();


--------REGEX------
Example:
	suppose, while signing up for a website,
	we enter the details.
	When we submit, it will check if the data entered are valid or not.

	ex:
		email id
		password should meet some criteria

Regular Expressions 
	are used to check if the string matches a particular pattern
	are used to extract a portion of the string that matches a particular pattern


need to understand the symbols used in regex:

symbol to match a character
multiplicity

\d+
\d*


multiplicity:
	+		1 or more
	*		0 or more
	?		0 or 1
	

	{1,3}		minimum 1 and maximum 3
	{1,}		minimum 1 and maximum unbounded	any much max
	{,3}		maximum 3

grouping symbols

(	)		this is used to group patterns

	E\d{3}		E001	E123	E222

	(E\d{3})+		
	
[	]		is used to list the characters from which only 1 can occur
		[a-z]	means, any one lower case alphabet can occur
		[0-9]	means, any 1 digit can occur
		[0-9]+	means, 1 or more number can occur
		[a-zA-Z0-9]{1,3}	means, number or lower case or upper case character can occur

		[aeiou]	either	a or e or i or o or u can occur

	.		means matches any character or number or symbol

Example:
	accept an input from the user and check if it is a valid ip address or not?	ipv4

	127.0.0.1

	255.255.255.255
	0.0.0.0	
	[.]

	This month is "December". Next month is "January"


String str="This month is "December". Next month is "January"";


c:\Program Files

\d		is digit
[0-9]		is digit



\.		
[.]


Get input from the user and check if it is a valid pin code or not


import java.util.Scanner;

public class EscapeDemo {

	public static void main(String[] args) {
		String input=new Scanner(System.in).next();
		System.out.println(input.matches("\\d{6}"));
	}

}


Employee id must start with E and followed by 3 digit number
import java.util.Scanner;

public class EscapeDemo {

	public static void main(String[] args) {
		String input=new Scanner(System.in).next();
		System.out.println(input.matches("E\\d{3}"));
	}

}



Accept an input from the user and extract all the mobile numbers found in that string
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EscapeDemo {

	public static void main(String[] args) {
		String input=new Scanner(System.in).nextLine();
//		System.out.println(input.matches("E\\d{3}"));
		Pattern p = Pattern.compile("\\d{10}");
		Matcher m=p.matcher(input);
		while(m.find())
		{
			System.out.println(m.group());
		}
	}

}




1
http://www.skct.edu


University - Requirement 3
Requirement 3:
   In this requirement, you need to validate the website and the mobile number of the note.

a)Create a Class Main with the following static methods:
Method Website	Description
static Boolean validateWebsite(String website)	Validate the website based on the rules given below. Returns true ifwebsite is valid else return false
static Boolean validateMobile(String mobileNo)	Validate the mobile number based on the rules given below. Returnstrue if mobileNo is valid else returnfalse

b) While validating website follow the below rules,
   
http://www.iit.edu.in
iit - domain name
edu - sTLD
in - ccTLD

1. The website should start http:// or https:// protocol
2. The website may or may not contain " www." after the protocol.
3. The domain name should contain only alphabets, either uppercase or lowercase and should not contain any special characters.
4. sTLD (sponsored top-level domain) should contain 2 to 6 characters
5. ccTLD(country code top-level domain) may or may not be present in a website and it should contain 2 to 6 characters

c) While validating mobile number follow the below rules,

1.The mobile number should have prefix as " +91 "(international calling code).
2.The mobile number should have 10 numbers [0-9].

Note: Print "Website is valid" if website is valid else print "Website is invalid". Print "Mobile number is valid" if mobile number is valid else print "Mobile number is invalid".
            All the above print statements are present in the main method.

Menu:
1.Validate Website
2.Validate Mobile number

Sample Input and Output 1:

1.Validate Website
2.Validate Mobile number
Enter your choice:
1
Enter the Website to be validated:
https://caspercollege.edu.in
Website is valid

Sample Input and Output 2:

1.Validate Website
2.Validate Mobile number
Enter your choice:
1
Enter the Website to be validated:
https://www.iit_m.ac.in
Website is invalid

Sample Input and Output 3:

1.Validate Website
2.Validate Mobile number
Enter your choice:
2
Enter the Mobile no. to be validated:
+919876543210
Mobile number is valid

Sample Input and Output 4:

1.Validate Website
2.Validate Mobile number
Enter your choice:
2
Enter the Mobile no. to be validated:
+9987643210
Mobile number is invalid

-----------------
Solution:


import java.util.Scanner;

public class Req3 {

	static Boolean validateWebsite(String website)
	{
		String regex="((http://)|(https://))(www.){0,1}([A-Za-z])+[.][a-z]{2,6}([.][a-z]{2,6}){0,1}";
		return website.matches(regex);
	}
	
	static Boolean validateMobile(String mobileNo)
	{
		String regex="([+]91){1}(\\d{10})";
		return mobileNo.matches(regex);
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("1.Validate Website\r\n" + 
				"2.Validate Mobile number\r\n" + 
				"Enter your choice:\r\n" + 
				"");
		
		int choice=sc.nextInt();
		switch(choice)
		{
		case 1:	//validate website
			System.out.println("Enter the Website to be validated:");
			String website=sc.next();
//			if(website.equals(""))
//				website=sc.next();
			if(validateWebsite(website))
			{
				System.out.println("Website is valid");
			}else
			{
				System.out.println("Website is invalid");
			}
			break;
		case 2:	//validate mobile number
			System.out.println("Enter the Mobile no. to be validated:");
			String mobileNo=sc.next();
			if(validateMobile(mobileNo))
			{
				System.out.println("Mobile number is valid");
			}else
			{
				System.out.println("Mobile number is invalid");
			}
			break;
		}
	}
	
	
}
